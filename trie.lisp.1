

;;(a p p l e)
;;((a (p (p (l (e) (s))))) (b) (c) (d) (e) (f))

(defparameter *trie*
   '((a)
     (b)
     (c)
     (d)
     (e)
     (f)
     (g)
     (h)
     (i)
     (j)
     (k)
     (l)
     (m)
     (n)
     (o)
     (p)
     (q)
     (r)
     (s)
     (t)
     (u)
     (v)
     (w)
     (x)
     (y)
     (z)))

(car '((a) (b) (c)))
(nth 0 '((a) (b) (c)))
(car '((a (p)) (b) (c)))
(cdr (car '((a (p)) (b) (c))))
(car (cdr (car '((a (p)) (b) (c)))))
(car (car (cdr (car '((a (p)) (b) (c))))))

(defun member? (lst m)
  (labels ((mem? (l m)
             (cond
               ((null l) nil)
               ((eq (car (car l)) m) (car l))
               (t (mem? (cdr l) m)))))
    (mem? (cdr lst) m)))

(member? '(a (p (p (l (e)) (s))) (n)) 'p)
(member? '(a (p (p (l (e)) (s))) (n)) 'n)
(member? '(a (p (p (l (e)) (s))) (n) (s (k))) 's)

(defun add-member (lst m)
  (labels ((add-mem (l m)
             (cond
               ((null l) (append lst (list (list m))))
               ((eq (car (car l)) m) (car l))
               (t (add-mem (cdr l) m)))))
    (add-mem (cdr lst) m)))

(add-member '(a (p (p (l (e)) (s))) (n) (s (k))) 'b)
(add-member '() 'a)
(add-member '(a) 'p)

(defun add-member-f (lst m)
  (labels ((add-mem (l m)
             (cond
               ((null l) (list (list m)))
               ((eq (car (car l)) m) '())
               (t (cons (car l) (add-mem (cdr l) m))))))
    ((cons (car lst) (add-mem (cdr lst) m)))))

(defun add-member-sub (lst mbr)
  (labels ((add-mem (l m)
             (cond
               ((null l)
                (if (null m)
                    '()
                    (list (list m))))
               ((eq (car (car l)) m) (add-mem l '()))
               (t (cons (car l) (add-mem (cdr l) m))))))
    (add-mem (cdr lst) mbr)))

(defun add-member-full (lst mbr)
  (cons (car lst) (add-member-sub lst mbr)))

(add-member-full '(a (p (p (l (e)) (s))) (n) (s (k))) 'b)
(add-member-full '(a (p (p (l (e)) (s))) (n) (s (k))) 'p)

(defun add-member-at-level (lst m levl)
  (if (eq 1 levl)
      (if (eq (car lst) m)
          (cons m '()))
      ))


(add-member-at-level '(a (p (p (l (e)) (s))) (n) (s (k))) 'p 3)

(defun get-matching-slist (m l)
  (cond
    ((null l) l)
    ((eq (car (car l)) m) (car l))
    (t (get-matching-slist m (cdr l)))))

(defun get-matching-slist (member lst)
  (let ((fl lst))
    (labels ((gms (m l)
               (cond
                 ((null l) fl)
                 ((eq (car (car l)) m) (car l))
                 (t (gms m (cdr l))))))
      (gms member lst))))

(get-matching-slist 'p '((p (p (l (e)) (s))) (n) (s (k))))
(get-matching-slist 'b '((p (p (l (e)) (s))) (n) (s (k))))

(car (car '((p (p (l (e)) (s))) (n) (s (k)))))
(car '((p (p (l (e)) (s))) (n) (s (k))))


(let ((lst '((p (p (l (e)) (s))) (n) (s (k))))
      (tl '(p p l y)))
  (labels ((add-mem (l t)
             (cond
               ((null t) l)
               ())))))


(defparameter *trie-small*
  '((a)
    (b)
    (c)))

(defun member? (m lst)
  (cond
    ((null lst) nil)
    ((eq m (car (car lst)))
     (car lst))
    (t (member? m (cdr lst)))))

(defun member? (m lst)
  (cond
    ((null lst) nil)
    ((atom (car lst))
     (if (eq (car lst) m)
         lst))
    ((eq m (car (car lst)))
     (car lst))
    (t (member? m (cdr lst)))))

(member? 'a '())
(member? 'b '((a)))
(member? 'p '(a))
(member? 'p '(a (p)))
(member? 'p '(p (p (l))))

(cons '() '((a)))


(defun sub-trie (seq tr)
  (let ((mbr (member? (car seq) tr))
        (elem (car seq))
        (lelem (list (list (car seq)))))
    (cond
      ((null seq)
       mbr)
      ((eq nil mbr)
       (cons elem (list (sub-trie (cdr seq) (cdr mbr)))))
      (t (cons (car mbr) (list (sub-trie (cdr seq) (cdr mbr))))))))


(defun member? (m lst)
  (cond
    ((null lst) nil)
    ((atom (car lst))
     (if (eq (car lst) m)
         lst))
    ((eq m (car (car lst)))
     (car lst))
    (t (member? m (cdr lst)))))

(defun sub-trie (seq tr)
  (let ((mbr (member? (car seq) tr))
        (elem (car seq))
        (lelem (list (car seq))))
    (cond
      ((null seq)
       nil)
      ((eq nil mbr)
       (append (car tr) (cons elem (list (sub-trie (cdr seq) (cdr mbr))))))
      (t (cons (car mbr) (list (sub-trie (cdr seq) (cdr mbr))))))))

(defun triefy (seq))
  

(triefy '(a p p l e))
(triefy '(a p p s))
(triefy '(b a n d a g e))
(triefy '(b a n d a i d))

(sub-trie '(a p p l e) *trie*)

*trie*

(cons 'a '((p)))

(sub-trie '(a p p l e) '((a) (b) (c)))
(sub-trie '(a p p s) '((a (p (p (l (e))))) (b) (c)))
(sub-trie '(b a n d a g e) '((a (p (p (l (e))))) (b) (c)))




